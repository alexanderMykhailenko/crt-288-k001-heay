// VCDlg.cpp : implementation file
//

#include "stdafx.h"
#include "VC.h"
#include "VCDlg.h"

#include "CRT_288_K001.h"

//HANDLE hCom;
HANDLE hCom;
BYTE ICRWaddr=0x00;
int rc=0;
bool ComIsOpen=false;

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CAboutDlg dialog used for App About

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// Dialog Data
	//{{AFX_DATA(CAboutDlg)
	enum { IDD = IDD_ABOUTBOX };
	//}}AFX_DATA

	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CAboutDlg)
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
	//}}AFX_VIRTUAL

// Implementation
protected:
	//{{AFX_MSG(CAboutDlg)
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
	//{{AFX_DATA_INIT(CAboutDlg)
	//}}AFX_DATA_INIT
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAboutDlg)
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
	//{{AFX_MSG_MAP(CAboutDlg)
		// No message handlers
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CVCDlg dialog

CVCDlg::CVCDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CVCDlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CVCDlg)
	m_Track3Data = _T("");
	m_Track2Data = _T("");
	m_Track1Data = _T("");
	m_bUSB = FALSE;
	//}}AFX_DATA_INIT
	// Note that LoadIcon does not require a subsequent DestroyIcon in Win32
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CVCDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CVCDlg)
	DDX_Control(pDX, IDC_APDUSENTSTRING, m_APDUSendStr);
	DDX_CBString(pDX, IDC_APDUSENTSTRING, m_APDUSENDSTRINGCMD);
	DDX_Text(pDX, IDC_APDUBACKSTRING, m_APDUBACKSTRING);
	DDX_Text(pDX, IDC_RESETBACKSTRING, m_RESETBACKSTRING);
	DDX_Text(pDX, IDC_Track3EDIT, m_Track3Data);
	DDX_Text(pDX, IDC_Track2EDIT, m_Track2Data);
	DDX_Text(pDX, IDC_Track1EDIT, m_Track1Data);
	DDX_Check(pDX, IDC_USB, m_bUSB);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CVCDlg, CDialog)
	//{{AFX_MSG_MAP(CVCDlg)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_OpenCommBtn, OnOpenCommBtn)
	ON_BN_CLICKED(IDC_CloseCommBtn, OnCloseCommBtn)
	ON_BN_CLICKED(IDC_ResetReaderBtn, OnResetReaderBtn)
	ON_BN_CLICKED(IDC_CardStatusBtn, OnCardStatusBtn)
	ON_BN_CLICKED(IDC_RFTestTypeBtn, OnRFTestTypeBtn)
	ON_BN_CLICKED(IDC_ICTestTypeBtn, OnICTestTypeBtn)
	ON_BN_CLICKED(IDC_CPURESETButton, OnCPURESETButton)
	ON_BN_CLICKED(IDC_CPUAPDUSENDButton, OnCPUAPDUSENDButton)
	ON_BN_CLICKED(IDC_LockCardBtn, OnLockCardBtn)
	ON_BN_CLICKED(IDC_UnlockCardBtn, OnUnlockCardBtn)
	ON_BN_CLICKED(IDC_AutomaticallylockBtn, OnAutomaticallylockBtn)
	ON_BN_CLICKED(IDC_NotautomaticallylockBtn, OnNotautomaticallylockBtn)
	ON_BN_CLICKED(IDC_ClearbufferBtn, OnClearbufferBtn)
	ON_BN_CLICKED(IDC_ReadTrack1Btn, OnReadTrack1Btn)
	ON_BN_CLICKED(IDC_Inquire_StatusBtn, OnInquireStatusBtn)
	ON_BN_CLICKED(IDC_CPUDOWNButton, OnCPUDOWNButton)
	ON_BN_CLICKED(IDC_ReadTrack2Btn, OnReadTrack2Btn)
	ON_BN_CLICKED(IDC_ReadTrack3Btn, OnReadTrack3Btn)
	ON_BN_CLICKED(IDC_ClearDataBtn, OnClearDataBtn)
	ON_BN_CLICKED(IDC_ReadTrackPullOutBtn, OnReadTrackPullOutBtn)
	ON_BN_CLICKED(IDC_ReadTrackInsertCardBtn, OnReadTrackInsertCardBtn)
	ON_BN_CLICKED(IDC_CancelReadTrackBtn, OnCancelReadTrackBtn)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CVCDlg message handlers

BOOL CVCDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Add "About..." menu item to system menu.

	// IDM_ABOUTBOX must be in the system command range.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		CString strAboutMenu;
		strAboutMenu.LoadString(IDS_ABOUTBOX);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon

	// TODO: Add extra initialization here

	//�����ı������忪ʼ
	CWnd *pWnd1 =GetDlgItem(IDC_ST_COMM);

    CFont *pFont = new CFont;

    pFont->CreateFont(20,0,0,0,FW_NORMAL,FALSE,FALSE,0,ANSI_CHARSET,OUT_DEFAULT_PRECIS,CLIP_DEFAULT_PRECIS,DEFAULT_QUALITY,DEFAULT_PITCH | FF_SWISS,_T("Arial"));

    pWnd1->SetFont(pFont);
	//�����ı����������

	m_APDUSendStr.SetCurSel(0);

	((CButton *)GetDlgItem(IDC_RADIO1))->SetCheck(TRUE);//ѡ��
	((CButton *)GetDlgItem(IDC_RADIO2))->SetCheck(FALSE);//��ѡ��

	((CButton *)GetDlgItem(IDC_CHECK1))->SetCheck(TRUE);//ѡ��
	((CButton *)GetDlgItem(IDC_CHECK2))->SetCheck(TRUE);//ѡ��
	((CButton *)GetDlgItem(IDC_CHECK3))->SetCheck(TRUE);//ѡ��

	return TRUE;  // return TRUE  unless you set the focus to a control
}

void CVCDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CVCDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

// The system calls this to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CVCDlg::OnQueryDragIcon()
{
	return (HCURSOR) m_hIcon;
}

void CVCDlg::OnOpenCommBtn()
{
	UpdateData();
	static char szComPortNumber[ ] = "COM1";
	unsigned int Baudrate = 9600;
	if (ComIsOpen==false && hCom==0)
	{
		if (m_bUSB)
			hCom=CRT288KUOpen();
		else
			hCom=CRT288KROpenWithBaut(szComPortNumber,Baudrate);

		if (m_bUSB)
		{
			if(hCom<=0)
			{
				ComIsOpen=false;//���ڴ�ʧ��
				CWnd   *pWnd   =   GetDlgItem(IDC_ST_COMM);
				pWnd->SetWindowText(_T("No Found CRT-288K"));
			}
			else
			{
				// Communications between the Host Computer and the Card Reader/Writer was established
				// successfully.
				ComIsOpen=true;//���ڼ�����
				CWnd   *pWnd   =   GetDlgItem(IDC_ST_COMM);
				pWnd->SetWindowText(_T("CRT-288K Has been connected"));
			}
		}
		else
		{
			if(hCom<=0)
			{
				ComIsOpen=false;//���ڴ�ʧ��
				CWnd   *pWnd   =   GetDlgItem(IDC_ST_COMM);
				pWnd->SetWindowText(_T("Comm. port is Error"));
			}
			else
			{
				// Communications between the Host Computer and the Card Reader/Writer was established
				// successfully.
				ComIsOpen=true;//���ڼ�����
				CWnd   *pWnd   =   GetDlgItem(IDC_ST_COMM);
				pWnd->SetWindowText(_T("Comm. port is Open"));
			}
		}
	}
	else
	{
		MessageBox("Comm. Port Setup First");

	}
}

void CVCDlg::OnCloseCommBtn()
{
	if (ComIsOpen=true )
	{
	    CRT288KRClose(hCom);
        ComIsOpen=false;
		hCom=0;
		CWnd   *pWnd   =   GetDlgItem(IDC_ST_COMM);
		pWnd->SetWindowText(_T("Comm. Port is Close"));
	}
}
void CVCDlg::OnResetReaderBtn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0x30;
	PmCode=0x30;
	CmDataLen=0;

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReType==0x50)
		{
			MessageBox("Execute Ok     ");
		}
		else if  (ReType==0x4e)
		{
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf="Error Code: ";
			MsgBuf += t;
			MessageBox(MsgBuf,MB_OK,0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
		MessageBox("Communication Error");
}

void CVCDlg::OnRFTestTypeBtn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0x50;
	PmCode=0x31;
	CmDataLen=0;

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReType==0x50)
		{
			CString t,MsgBuf;
			t.Format("%c%c",ReData[0],ReData[1]);
			MsgBuf="Card Code: ";
			MsgBuf += t;
			switch(ReData[0])
			{
				 case '0':
					  switch(ReData[1])
					  {
						   case '0':
							   MessageBox(MsgBuf+"\nUnknow Type", "Auto Test RF Card Type",MB_OK);
							   break;
					  }
					  break;

				 case '1':
					  switch(ReData[1])
					  {
						   case '0':
							   MessageBox(MsgBuf+"\nS50 card", "Auto Test RF Card Type",MB_OK);
							   break;
						   case '1':
							   MessageBox(MsgBuf+"\nS70 card", "Auto Test RF Card Type",MB_OK);
							   break;
						   case '2':
							   MessageBox(MsgBuf+"\nUltralight card", "Auto Test RF Card Type",MB_OK);
							   break;
					  }
					  break;
				 case '2':
					  switch(ReData[1])
					  {
						   case '0':
							   MessageBox(MsgBuf+"\nType A CPU", "Auto Test RF Card Type",MB_OK);
							   break;
					  }
					  break;
				 case '3':
					  switch(ReData[1])
					  {
						   case '0':
							   MessageBox(MsgBuf+"\nType B CPU", "Auto Test RF Card Type",MB_OK);
							   break;
					  }
					  break;
				 default:
					 break;
			}
		}
		else if  (ReType==0x4e)
		{
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf="Error Code: ";
			MsgBuf += t;
			MessageBox(MsgBuf,MB_OK,0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
		MessageBox("Communication Error");
}

void CVCDlg::OnICTestTypeBtn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0x50;
	PmCode=0x30;
	CmDataLen=0;

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReType==0x50)
		{
			CString t,MsgBuf;
			t.Format("%c%c",ReData[0],ReData[1]);
			MsgBuf="Card Code: ";
			MsgBuf += t;
			switch(ReData[0])
			{
				 case '0':
					  switch(ReData[1])
					  {
						   case '0':
							   MessageBox(MsgBuf+"\nUnknow Type", "Auto Test IC Card Type",MB_OK);
							   break;
					  }
					  break;

				 case '1':
					  switch(ReData[1])
					  {
						   case '0':
							   MessageBox(MsgBuf+"\nT=0 CPU Card", "Auto Test IC Card Type",MB_OK);
							   break;
						   case '1':
							   MessageBox(MsgBuf+"\nT=1 CPU Card", "Auto Test IC Card Type",MB_OK);
							   break;
					  }
					  break;
				 case '2':
					  switch(ReData[1])
					  {
						   case '1':
							   MessageBox(MsgBuf+"\nSLE4442 Card", "Auto Test IC Card Type",MB_OK);
							   break;
						   case '2':
							   MessageBox(MsgBuf+"\nSLE4428 Card", "Auto Test IC Card Type",MB_OK);
							   break;
					  }
					  break;
				 case '3':
					  switch(ReData[1])
					  {
						   case '0':
							   MessageBox(MsgBuf+"\n24C01 Card", "Auto Test IC Card Type",MB_OK);
							   break;
						   case '1':
							   MessageBox(MsgBuf+"\n24C02 Card", "Auto Test IC Card Type",MB_OK);
							   break;
						   case '2':
							   MessageBox(MsgBuf+"\n24C04 Card", "Auto Test IC Card Type",MB_OK);
							   break;
						   case '3':
							   MessageBox(MsgBuf+"\n24C08 Card", "Auto Test IC Card Type",MB_OK);
							   break;
						   case '4':
							   MessageBox(MsgBuf+"\n24C16 Card", "Auto Test IC Card Type",MB_OK);
							   break;
						   case '5':
							   MessageBox(MsgBuf+"\n24C32 Card", "Auto Test IC Card Type",MB_OK);
							   break;
						   case '6':
							   MessageBox(MsgBuf+"\n24C64 Card", "Auto Test IC Card Type",MB_OK);
							   break;
						   case '7':
							   MessageBox(MsgBuf+"\n24C128 Card", "Auto Test IC Card Type",MB_OK);
							   break;
						   case '8':
							   MessageBox(MsgBuf+"\n24C256 Card", "Auto Test IC Card Type",MB_OK);
							   break;
					  }
					  break;
				 case '4':
					  switch(ReData[1])
					  {
						   case '1':
							   MessageBox(MsgBuf+"\nAT45D041 Card", "Auto Test IC Card Type",MB_OK);
							   break;
					  }
					  break;
				 case '5':
					  switch(ReData[1])
					  {
						   case '1':
							   MessageBox("IC Card Type Code:"+MsgBuf+"\nAT88SC1608 Card", "Auto Test IC Card Type",MB_OK);
							   break;
					  }
					  break;
				 default:
					 break;
			}
		}
		else if  (ReType==0x4e)
		{
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf="Error Code: ";
			MsgBuf += t;
			MessageBox(MsgBuf,MB_OK,0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
		MessageBox("Communication Error");
}

void CVCDlg::OnCardStatusBtn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0x31;
	PmCode=0x30;
	CmDataLen=0;

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReType==0x50)
		{
		  CString Str1,Str2;
		  switch(SEt1)
		  {
			   case '0':
				   Str1="Hook lock has been activated";
				   break;
			   case '1':
				   Str1="Hook lock has been released";
				   break;
		  }
		  switch(SEt0)
		  {
			   case '0':
				   Str2="No card in the ICRW";
				   break;
			   case '1':
				   Str2="One card in the ICRW, but it is not inserted in place";
				   break;
			   case '2':
				   Str2="One card in the ICRW, but it is inserted in place";
				   break;
		  }
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf = "Execute OK and status code: "+t;
			MsgBuf += "\n"+Str1+"\n"+Str2;
			MessageBox(MsgBuf,"Card Status",0);
		}
		else if  (ReType==0x4e)
		{
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf="Error Code: ";
			MsgBuf += t;
			MessageBox(MsgBuf,MB_OK,0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
		MessageBox("Communication Error");
}


void CVCDlg::OnCPURESETButton()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];
	m_RESETBACKSTRING.Format ("");
	m_APDUBACKSTRING.Format ("");
	UpdateData(false);

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0x51;
	PmCode=0x30;
	CmDataLen=1;
	if (((CButton *)GetDlgItem(IDC_RADIO1))->GetCheck())//����1��ʾѡ�ϣ�0��ʾûѡ��
	{
		CmData[0]=0x30;
	}
	if (((CButton *)GetDlgItem(IDC_RADIO2))->GetCheck())//����1��ʾѡ�ϣ�0��ʾûѡ��
	{
		CmData[0]=0x33;

	}
	if (((CButton *)GetDlgItem(IDC_RADIO3))->GetCheck())//����1��ʾѡ�ϣ�0��ʾûѡ��
	{
		CmData[0]=0x35;

	}

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReType==0x50)
		{
			CString str,t;
			CString TempBuf="";
			for(int n=1; n<ReDataLen; n++)  //
				{
				  	t.Format("%02x",ReData[n]);
					TempBuf += t;
					t="";
				}
			TempBuf.MakeUpper();
			m_RESETBACKSTRING.Format ("%s", TempBuf);
			UpdateData(false);
			m_APDUSendStr.SetCurSel(0);
			if (ReData[0]==48)
			{
				MessageBox("CPU Card(T=0) Activate Successed");
			}
			if (ReData[0]==49)
			{
				MessageBox("CPU Card(T=1) Activate Successed");
			}

		}
		else if((ReType==0x4e) && (ReDataLen>0))
		{
			CString str,t;
			CString TempBuf="";
			for(int n=1; n<ReDataLen; n++)  //
				{
				  	t.Format("%02x",ReData[n]);
					TempBuf += t;
					t="";
				}
			m_RESETBACKSTRING.Format ("%s", TempBuf);
			UpdateData(false);
			m_APDUSendStr.SetCurSel(0);
			if (ReData[0]==48)
			{
				MessageBox("CPU Card(T=0) Activate Successed,But CPU card information does not meet the EMV mode ATR ");
			}
		}
		else if((ReType==0x4e) && (ReDataLen==0))
		{
			SANKYOErrMsg(SEt1,SEt0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
	{
		MessageBox("Communication Error");
	}
}

void CVCDlg::OnCPUAPDUSENDButton()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	BYTE buf[1024];
	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	UpdateData(true);
	if(m_APDUSENDSTRINGCMD.GetLength()==0)
	{
		MessageBox("The APDU data to send is not validity!");
		return;
	}

	if(GetDECData(buf,m_APDUSENDSTRINGCMD))
	{
		MessageBox("The APDU data to send is not validity!");
		return;
	}
	memset(CmData,0x00,sizeof(CmData));
	CmCode=0x51;
	PmCode=0x39;
	CmDataLen=(m_APDUSENDSTRINGCMD.GetLength())/2;

	for (int i=0;i<(m_APDUSENDSTRINGCMD.GetLength())/2 ;i++)
	{
		CmData[i]=buf[i];
	}

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReType==0x50)
		{
			CString str,t;
			CString TempBuf="";
			for(int n=0; n<ReDataLen; n++)
				{
				  	t.Format("%02x",ReData[n]);
					TempBuf += t;
					t="";
				}
			TempBuf.MakeUpper();
			m_APDUBACKSTRING.Format ("%s", TempBuf);
			UpdateData(false);
			MessageBox("Send APDU Successed");
		}
		else if  (ReType==0x4e)
		{
			SANKYOErrMsg(SEt1,SEt0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
		MessageBox("Communication Error");
}

void CVCDlg::OnLockCardBtn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0xB0;
	PmCode=0x30;
	CmDataLen=0;

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReType==0x50)
		{
			MessageBox("Execute Ok     ");
		}
		else if  (ReType==0x4e)
		{
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf="Error Code: ";
			MsgBuf += t;
			MessageBox(MsgBuf,MB_OK,0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
		MessageBox("Communication Error");

}

void CVCDlg::OnUnlockCardBtn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0xB0;
	PmCode=0x31;
	CmDataLen=0;


	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReType==0x50)
		{
			MessageBox("Execute Ok     ");
		}
		else if  (ReType==0x4e)
		{
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf="Error Code: ";
			MsgBuf += t;
			MessageBox(MsgBuf,MB_OK,0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
		MessageBox("Communication Error");
}

void CVCDlg::OnAutomaticallylockBtn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0xB0;
	PmCode=0x32;
	CmDataLen=0;

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReType==0x50)
		{
			MessageBox("Execute Ok     ");
		}
		else if  (ReType==0x4e)
		{
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf="Error Code: ";
			MsgBuf += t;
			MessageBox(MsgBuf,MB_OK,0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
		MessageBox("Communication Error");
}

void CVCDlg::OnNotautomaticallylockBtn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0xB0;
	PmCode=0x33;
	CmDataLen=0;

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReType==0x50)
		{
			MessageBox("Execute Ok     ");
		}
		else if  (ReType==0x4e)
		{
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf="Error Code: ";
			MsgBuf += t;
			MessageBox(MsgBuf,MB_OK,0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
		MessageBox("Communication Error");
}

void CVCDlg::OnClearbufferBtn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}

	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0x36;
	PmCode=0x39;
	CmDataLen=0;

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReType==0x50)
		{
			MessageBox("Execute Ok     ");
		}
		else if  (ReType==0x4e)
		{
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf="Error Code: ";
			MsgBuf += t;
			MessageBox(MsgBuf,MB_OK,0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
		MessageBox("Communication Error");

}

void CVCDlg::OnReadTrack1Btn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	CString Tra1Buf,Tra2Buf,Tra3Buf;
	int n;
	CString str,t;
	Tra1Buf="";
	Tra2Buf="";
	Tra3Buf="";

	m_Track1Data.Empty();
	m_Track2Data.Empty();
	m_Track3Data.Empty();
	UpdateData(false);

	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0x36;
	PmCode=0x31;
	CmDataLen=2;
	CmData[0]=0x30;
	CmData[1]=0x31;

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReDataLen>0 && (ReType==0x50 || ReType==0x4e))
		{
			switch(ReData[0])
			{
				case 80 :
					 for(n=1; n<ReDataLen; n++)  //һ������
						{
				  			t.Format("%c",ReData[n]);
							Tra1Buf += t;
							t="";
						}
					 break;
				case 78 :
					 switch(ReData[2])
					 {
						case 54 :
							Tra1Buf="No start bits (STX)";
							break;
						case 55 :
							Tra1Buf="No stop bits (ETX)";
							break;
						case 48 :
							Tra1Buf="Byte Parity Error(Parity))";
							break;
						case 56 :
							Tra1Buf="Parity Bit Error(LRC)";
							break;
						case 52 :
							Tra1Buf="Card Track Data is Blank";
							break;
						case 51 :
							Tra1Buf="Only(SS-ES-LRC)";
							break;
						default :
							break;
					 }
				default :
					break;
			}
			m_Track1Data.Format ("%s", Tra1Buf);
			UpdateData(false);
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf="Status Code: ";
			MsgBuf += t;
			MessageBox(MsgBuf,MB_OK,0);
		}
		else if(ReType==0x4E && ReDataLen ==0)
		{
		   SANKYOErrMsg(SEt1,SEt0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
	{
		MessageBox("Communication Error");
	}
}
void CVCDlg::OnReadTrack2Btn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	CString Tra1Buf,Tra2Buf,Tra3Buf;
	int n;
	CString str,t;
	Tra1Buf="";
	Tra2Buf="";
	Tra3Buf="";

	m_Track1Data.Empty();
	m_Track2Data.Empty();
	m_Track3Data.Empty();
	UpdateData(false);

	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0x36;
	PmCode=0x31;
	CmDataLen=2;
	CmData[0]=0x30;
	CmData[1]=0x32;

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReDataLen>0 && (ReType==0x50 || ReType==0x4e))
		{
			switch(ReData[0])
			{
				case 80 :
					 for(n=1; n<ReDataLen; n++)  //һ������
						{
				  			t.Format("%c",ReData[n]);
							Tra2Buf += t;
							t="";
						}
					 break;
				case 78 :
					 switch(ReData[2])
					 {
						case 54 :
							Tra2Buf="No start bits (STX)";
							break;
						case 55 :
							Tra2Buf="No stop bits (ETX)";
							break;
						case 48 :
							Tra2Buf="Byte Parity Error(Parity))";
							break;
						case 56 :
							Tra2Buf="Parity Bit Error(LRC)";
							break;
						case 52 :
							Tra2Buf="Card Track Data is Blank";
							break;
						case 51 :
							Tra2Buf="Only(SS-ES-LRC)";
							break;
						default :
							break;
					 }
				default :
					break;
			}
			m_Track2Data.Format ("%s", Tra2Buf);
			UpdateData(false);
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf="Status Code: ";
			MsgBuf += t;
			MessageBox(MsgBuf,MB_OK,0);
		}
		else if(ReType==0x4E && ReDataLen ==0)
		{
		   SANKYOErrMsg(SEt1,SEt0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
	{
		MessageBox("Communication Error");
	}
}

void CVCDlg::OnReadTrack3Btn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	CString Tra1Buf,Tra2Buf,Tra3Buf;
	int n;
	CString str,t;
	Tra1Buf="";
	Tra2Buf="";
	Tra3Buf="";

	m_Track1Data.Empty();
	m_Track2Data.Empty();
	m_Track3Data.Empty();
	UpdateData(false);

	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0x36;
	PmCode=0x31;
	CmDataLen=2;
	CmData[0]=0x30;
	CmData[1]=0x33;

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReDataLen>0 && (ReType==0x50 || ReType==0x4e))
		{
			switch(ReData[0])
			{
				case 80 :
					 for(n=1; n<ReDataLen; n++)  //һ������
						{
				  			t.Format("%c",ReData[n]);
							Tra3Buf += t;
							t="";
						}
					 break;
				case 78 :
					 switch(ReData[2])
					 {
						case 54 :
							Tra3Buf="No start bits (STX)";
							break;
						case 55 :
							Tra3Buf="No stop bits (ETX)";
							break;
						case 48 :
							Tra3Buf="Byte Parity Error(Parity))";
							break;
						case 56 :
							Tra3Buf="Parity Bit Error(LRC)";
							break;
						case 52 :
							Tra3Buf="Card Track Data is Blank";
							break;
						case 51 :
							Tra3Buf="Only(SS-ES-LRC)";
							break;
						default :
							break;
					 }
				default :
					break;
			}
			m_Track3Data.Format ("%s", Tra3Buf);
			UpdateData(false);
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf="Status Code: ";
			MsgBuf += t;
			MessageBox(MsgBuf,MB_OK,0);
		}
		else if(ReType==0x4E && ReDataLen ==0)
		{
		   SANKYOErrMsg(SEt1,SEt0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
	{
		MessageBox("Communication Error");
	}
}

void CVCDlg::OnInquireStatusBtn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0x51;
	PmCode=0x32;
	CmDataLen=0;

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReType==0x50)
		{
		  CString Str1;
		  switch(ReData[0])
		  {
			   case '0':
				   Str1="Card is not activated";
				   break;
			   case '1':
				   Str1="The card has been activated, working frequency of 3.57 MHZ";
				   break;
			   case '2':
				   Str1="The card has been activated, working frequency of 7.16 MHZ";
				   break;
		  }
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf = "Execute OK and Inquire Status: "+t;
			MsgBuf += "\n"+Str1;
			MessageBox(MsgBuf,"Inquire Status",0);
		}
		else if  (ReType==0x4e)
		{
			CString t,MsgBuf;
			t.Format("%c%c",SEt1,SEt0);
			MsgBuf="Error Code: ";
			MsgBuf += t;
			MessageBox(MsgBuf,MB_OK,0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
		MessageBox("Communication Error");
}

void CVCDlg::OnCPUDOWNButton()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	unsigned char CmCode;
	unsigned char PmCode;
    int  CmDataLen;
	unsigned char CmData[1024];

	unsigned char ReType;

	unsigned char SEt0;
	unsigned char SEt1;
    int  ReDataLen;
	unsigned char ReData[1024];

	m_RESETBACKSTRING.Format ("");
	m_APDUBACKSTRING.Format ("");
	UpdateData(false);

	memset(CmData,0x00,sizeof(CmData));
	CmCode=0x51;
	PmCode=0x31;
	CmDataLen=0;

	if (m_bUSB)
		rc=USB_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);
	else
	    rc=RS232_ExeCommand(hCom,CmCode,PmCode,CmDataLen,CmData,&ReType,&SEt1,&SEt0,&ReDataLen,ReData);

	if(rc==0)
	{
		if (ReType==0x50)
		{
			MessageBox("Execute Ok     ");
		}
		else if  (ReType==0x4e)
		{
			SANKYOErrMsg(SEt1,SEt0);
		}
		else
		{
			MessageBox("Communication Error");
		}
	}
	else
		MessageBox("Communication Error");
}
void CVCDlg::SANKYOErrMsg(char chError1, char chError2)   //���ݷ��صĴ�����תΪӢ�Ĵ����
{
	CString t,MsgBuf;
	t.Format("%c%c",chError1,chError2);
	MsgBuf="Error Code: ";
	MsgBuf += t;
    switch(chError1)
	{
		 case '0':
			  switch(chError2)
			  {
				   case '0':
					   MessageBox(MsgBuf+"\nA given command code is unidentified", "Command execution error",MB_OK);
					   break;
				   case '1':
					   MessageBox(MsgBuf+"\nParameter is not correct", "Command execution error",MB_OK);
					   break;
				   case  '2':
					   MessageBox(MsgBuf+"\nCommand execution is impossible", "Command execution error",MB_OK);
					   break;
				   case '3':
					   MessageBox(MsgBuf+"\nHardware is not present", "Command execution error",MB_OK);
					   break;
				   case '4':
					   MessageBox(MsgBuf+"\nCommand data error", "Command execution error",MB_OK);
					   break;
				   case '5':
					   MessageBox(MsgBuf+"\nTried to card feed commands before the IC contact release command", "Command execution error",MB_OK);
					   break;
				   case  '6':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case '7':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case '8':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case  '9':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
			  }
			  break;

		 case '1':
			  switch(chError2)
			  {
				   case '0':
					   MessageBox(MsgBuf+"\nCard jam", "Command execution error",MB_OK);
					   break;
				   case '1':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case  '2':
					   MessageBox(MsgBuf+"\nSensor failure ", "Command execution error",MB_OK);
					   break;
				   case '3':
					   MessageBox(MsgBuf+"\nIrregular card length (LONG)", "Command execution error",MB_OK);
					   break;
				   case '4':
					   MessageBox(MsgBuf+"\nIrregular card length (SHORT)", "Command execution error",MB_OK);
					   break;
				   case '5':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case  '6':
					   MessageBox(MsgBuf+"\nThe card was moved forcibly", "Command execution error",MB_OK);
					   break;
				   case '7':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case '8':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case  '9':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
			  }
			  break;
		 case '2':
			  MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
			  break;
		 case '3':
			  MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
			  break;
		 case '4':
			  switch(chError2)
			  {
				   case '0':
					   MessageBox(MsgBuf+"\nCard was pulled out during capture", "Command execution error",MB_OK);
					   break;
				   case '1':
					   MessageBox(MsgBuf+"\nFailure at IC contact solenoid or sensor ICD", "Command execution error",MB_OK);
					   break;
				   case  '2':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case '3':
					   MessageBox(MsgBuf+"\nCard could not be set to IC contact position", "Command execution error",MB_OK);
					   break;
				   case '4':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case '5':
					   MessageBox(MsgBuf+"\nICRW ejected the card forcibly", "Command execution error",MB_OK);
					   break;
				   case  '6':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case '7':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case '8':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case  '9':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
			  }
			  break;
		 case '5':
			  switch(chError2)
			  {
				   case '0':
					   MessageBox(MsgBuf+"\nRetract counter overflow", "Command execution error",MB_OK);
					   break;
				   case '1':
					   MessageBox(MsgBuf+"\nMotor error", "Command execution error",MB_OK);
					   break;
				   case  '2':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case '3':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case '4':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case '5':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case  '6':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case '7':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case '8':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case  '9':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
			  }
			  break;
		 case '6':
			  switch(chError2)
			  {
				   case '0':
					   MessageBox(MsgBuf+"\nAbnormal condition was found on the power-line (Vcc) of IC card", "Command execution error",MB_OK);
					   break;
				   case '1':
					   MessageBox(MsgBuf+"\nReceiving error of ATR", "Command execution error",MB_OK);
					   break;
				   case  '2':
					   MessageBox(MsgBuf+"\nThe specified protocol does not agree with that of IC card", "Command execution error",MB_OK);
					   break;
				   case '3':
					   MessageBox(MsgBuf+"\nIC card communication error (IC card does not respond).", "Command execution error",MB_OK);
					   break;
				   case '4':
					   MessageBox(MsgBuf+"\nIC card communication error (Other than '63')", "Command execution error",MB_OK);
					   break;
				   case '5':
					   MessageBox(MsgBuf+"\nHOST sends command for IC card communication before receiving ATR", "Command execution error",MB_OK);
					   break;
				   case  '6':
					   MessageBox(MsgBuf+"\nTried to communicate with IC card not supported in ICRW.", "Command execution error",MB_OK);
					   break;
				   case '7':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case '8':
					   MessageBox(MsgBuf+"\n--------", "Command execution error",MB_OK);
					   break;
				   case  '9':
					   MessageBox(MsgBuf+"\nTried to communicate with IC card not supported in Protocol EMV2000.", "Command execution error",MB_OK);
					   break;
			  }
			  break;
		 case 'A':
			  switch(chError2)
			  {
				   case '0':
					   MessageBox(MsgBuf+"\nNO Card in ICRW", "Command execution error",MB_OK);
					   break;
			  }
			  break;
		 case 'B':
			  switch(chError2)
			  {
				   case '0':
					   MessageBox(MsgBuf+"\nNot received Initialize command", "Command execution error",MB_OK);
					   break;
			  }
			  break;
		 default:
			 break;

	}

}
int CVCDlg::gethexvalue(char p)
{
	switch(p)
	{
	case '0': return 0;
	case '1': return 1;
	case '2': return 2;
	case '3': return 3;
	case '4': return 4;
	case '5': return 5;
	case '6': return 6;
	case '7': return 7;
	case '8': return 8;
	case '9': return 9;
	case 'a':
	case 'A': return 10;
	case 'b':
	case 'B': return 11;
	case 'c': ;
	case 'C': return 12;
	case 'd':
	case 'D': return 13;
	case 'e':
	case 'E': return 14;
	case 'f':
	case 'F': return 15;
	};
	return -1;
}

int CVCDlg::GetDECData(BYTE *pData,CString str)
{
	int i=0;
	int len = str.GetLength();
	char *p = str.GetBuffer(0);
	for(i=0; i<16; i++)
	{
		int value = 0;
		value = gethexvalue(p[i*2])*16;
		if(value == -1)
			return 2;
		value += gethexvalue(p[i*2+1]);
		if(value == -1)
			return 2;
		pData[i] = value;
	}
	return 0;
}



void CVCDlg::OnClearDataBtn()
{
	m_Track1Data.Empty();
	m_Track2Data.Empty();
	m_Track3Data.Empty();
	UpdateData(false);
}

void CVCDlg::OnOK()
{
	// TODO: Add extra validation here

	CDialog::OnOK();
}

void CVCDlg::OnReadTrackPullOutBtn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	CString Tra1Buf,Tra2Buf,Tra3Buf;
	CString str,t;
	Tra1Buf="";
	Tra2Buf="";
	Tra3Buf="";

	m_Track1Data.Empty();
	m_Track2Data.Empty();
	m_Track3Data.Empty();
	UpdateData(false);

	unsigned char tracks;
	unsigned char ReadMode;
	unsigned char _WaitTime;

	unsigned char ReType;

    int  ReDataLen;
	unsigned char ReData[1024];
	memset(ReData,0x00,sizeof(ReData));


	if (CWnd::IsDlgButtonChecked(IDC_CHECK1) && CWnd::IsDlgButtonChecked(IDC_CHECK2) && CWnd::IsDlgButtonChecked(IDC_CHECK3))
		tracks=0x37;
	else if (CWnd::IsDlgButtonChecked(IDC_CHECK1) && CWnd::IsDlgButtonChecked(IDC_CHECK2))
		tracks=0x34;
	else if (CWnd::IsDlgButtonChecked(IDC_CHECK2) &&  CWnd::IsDlgButtonChecked(IDC_CHECK3))
		tracks=0x35;
	else if (CWnd::IsDlgButtonChecked(IDC_CHECK1) && CWnd::IsDlgButtonChecked(IDC_CHECK3))
		tracks=0x36;
	else if (CWnd::IsDlgButtonChecked(IDC_CHECK1))
		tracks=0x31;
	else if (CWnd::IsDlgButtonChecked(IDC_CHECK2))
		tracks=0x32;
	else if (CWnd::IsDlgButtonChecked(IDC_CHECK3))
		tracks=0x33;
	else
		tracks=0x30;

	ReadMode=0x31; //����������Ч��ʽ �ο�������Ч0x31,�忨������Ч0x30
	_WaitTime=0x20;

	if (m_bUSB)
		rc=USB_UpTrackData(hCom,tracks,ReadMode,_WaitTime,&ReType,&ReDataLen,ReData);
	else
		rc=RS232_UpTrackData(hCom,tracks,ReadMode,_WaitTime,&ReType,&ReDataLen,ReData);
	if(rc==0)
	{

		if (ReType==0x50)
		{
			CString str,t;
			CString TempBuf="";
			for(int n=1; n<ReDataLen; n++)  //
			{
				t.Format("%02X ",ReData[n]);
				TempBuf += t;
				t="";
			}
			TempBuf.MakeUpper();

			MessageBox(TempBuf, "Execute Ok     ",MB_OK);
		}
		else if  (ReType==0x4e)
		{
			MessageBox("Execute Error     ");
		}
	}
	else
	{
		switch (rc)
		{
			case UpLoadTimeOut:
				MessageBox("Time Out Error");
				break;
			case UpLoadCancel:
				MessageBox("Command Cancel");
				break;
			case Parameter_Error:
				MessageBox("Parameter Error");
				break;
			default:
				MessageBox("Communication Error");
				break;
		}
	}
}

void CVCDlg::OnReadTrackInsertCardBtn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	CString Tra1Buf,Tra2Buf,Tra3Buf;
	CString str,t;
	Tra1Buf="";
	Tra2Buf="";
	Tra3Buf="";

	m_Track1Data.Empty();
	m_Track2Data.Empty();
	m_Track3Data.Empty();
	UpdateData(false);

	unsigned char tracks;
	unsigned char ReadMode;
	unsigned char _WaitTime;

	unsigned char ReType;

    int  ReDataLen;
	unsigned char ReData[1024];
	memset(ReData,0x00,sizeof(ReData));

	if (CWnd::IsDlgButtonChecked(IDC_CHECK1) && CWnd::IsDlgButtonChecked(IDC_CHECK2) && CWnd::IsDlgButtonChecked(IDC_CHECK3))
		tracks=0x37;
	else if (CWnd::IsDlgButtonChecked(IDC_CHECK1) && CWnd::IsDlgButtonChecked(IDC_CHECK2))
		tracks=0x34;
	else if (CWnd::IsDlgButtonChecked(IDC_CHECK2) &&  CWnd::IsDlgButtonChecked(IDC_CHECK3))
		tracks=0x35;
	else if (CWnd::IsDlgButtonChecked(IDC_CHECK1) && CWnd::IsDlgButtonChecked(IDC_CHECK3))
		tracks=0x36;
	else if (CWnd::IsDlgButtonChecked(IDC_CHECK1))
		tracks=0x31;
	else if (CWnd::IsDlgButtonChecked(IDC_CHECK2))
		tracks=0x32;
	else if (CWnd::IsDlgButtonChecked(IDC_CHECK3))
		tracks=0x33;
	else
		tracks=0x30;

	ReadMode=0x30; //����������Ч��ʽ �ο�������Ч0x31,�忨������Ч0x30
	_WaitTime=0x20;

	if (m_bUSB)
		rc=USB_UpTrackData(hCom,tracks,ReadMode,_WaitTime,&ReType,&ReDataLen,ReData);
	else
		rc=RS232_UpTrackData(hCom,tracks,ReadMode,_WaitTime,&ReType,&ReDataLen,ReData);
	if(rc==0)
	{
		if (ReType==0x50)
		{
			CString str,t;
			CString TempBuf="";
			for(int n=1; n<ReDataLen; n++)  //
			{
				t.Format("%02X ",ReData[n]);
				TempBuf += t;
				t="";
			}
			TempBuf.MakeUpper();

			MessageBox(TempBuf, "Execute Ok     ",MB_OK);
		}
		else if  (ReType==0x4e)
		{
			MessageBox("Execute Error     ");
		}
	}
	else
	{
		switch (rc)
		{
			case UpLoadTimeOut:
				MessageBox("Time Out Error");
				break;
			case UpLoadCancel:
				MessageBox("Command Cancel");
				break;
			case Parameter_Error:
				MessageBox("Parameter Error");
				break;
			default:
				MessageBox("Communication Error");
				break;
		}
	}
}

void CVCDlg::OnCancelReadTrackBtn()
{
	if (hCom==0)
	{
		MessageBox("Please Open Comm. port first");
		return;
	}
	int rc;
	if (m_bUSB)
		rc=USB_Cancel_UpTrackData(hCom);
	else
		rc=RS232_Cancel_UpTrackData(hCom);
}
